---
title: report
author: "Masatoshi Katabuchi"
date: "`r format(Sys.time(), '%B %d, %Y')`"
fontsize: 12pt
format:
  html:
    # fig_caption: yes
    theme: cosmo #readable #sandstone #spacelab #flatly
    # highlight: pygments #tango #kate
    toc: true
    toc-depth: 2
    number-sections: true
    smooth-scroll: true
    # fontsize: medium
    # toc_float:
    #  collapsed: TRUE
    #  smooth_scroll: TRUE
    #  toc: true
---

```{r global_options, include=FALSE}
library(knitr)
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message = FALSE,
  cache = FALSE,
  fig.align = "center",
  fig.show = "hold"
)
```

```{r}
library(tidyverse)
library(targets)
library(kableExtra)
library(here)
library(jsonlite)
source(here("R", "stan.R"))
```

```{r}
tar_load(model_json)
tar_load(model_lma_json)

model <- fromJSON(model_json)$config
model_lma <- fromJSON(model_lma_json)$config
model_lma2 <- model_lma |>
  mutate(site = ifelse(str_detect(model, "GL"), "GL", "PA"))
model2 <- full_join(model_lma2, model, by = c("site", "model", "opt"))

gl_stan_names <- str_c("stan/",
  model2 |>
    filter(site == "GL") |>
    pull(model),
  ".stan")

pa_stan_names <- str_c("stan/",
  model2 |>
    filter(site == "PA") |>
    pull(model),
  ".stan")

```

# MCMC diagnostics

Note: Some models that we didn't used didn't converge very well.

```{r}
tar_read(summary_rhat_gl_summary_GL_LMA)
tar_read(summary_rhat_pa_summary_PA_LMA)
tar_read(summary_rhat_pa_summary_PA_LMA_opt)
tar_read(summary_rhat_gl_summary_GL_Ap_LLs)
tar_read(summary_rhat_gl_summary_GL_Aps_LLps)
tar_read(summary_rhat_gl_summary_GL_Ap_LLps)
tar_read(summary_rhat_gl_summary_GL_Aps_LLs)
tar_read(summary_rhat_pa_summary_PA_Ap_LLs)
tar_read(summary_rhat_pa_summary_PA_Aps_LLps)
tar_read(summary_rhat_pa_summary_PA_Ap_LLps)
tar_read(summary_rhat_pa_summary_PA_Aps_LLs)
tar_read(summary_rhat_pa_summary_PA_Ap_LLs_opt)
tar_read(summary_rhat_pa_summary_PA_Aps_LLps_opt)
tar_read(summary_rhat_pa_summary_PA_Ap_LLps_opt)
tar_read(summary_rhat_pa_summary_PA_Aps_LLs_opt)
tar_read(summary_rhat_pa_summary_PA_Ap_LDs)
tar_read(summary_rhat_pa_summary_PA_Ap_LDps)
tar_read(summary_rhat_pa_summary_PA_Ap_LDs_opt)
tar_read(summary_rhat_pa_summary_PA_Ap_LDps_opt)
tar_read(summary_rhat_pa_summary_PA_Ap_LLs_opt)
```

```{r}
tar_read(div_check_list_gl_diagnostics_GL_LMA)
tar_read(div_check_list_pa_diagnostics_PA_LMA)
tar_read(div_check_list_pa_diagnostics_PA_LMA_opt)
tar_read(div_check_list_gl_diagnostics_GL_Ap_LLs)
tar_read(div_check_list_gl_diagnostics_GL_Aps_LLps)
tar_read(div_check_list_gl_diagnostics_GL_Ap_LLps)
tar_read(div_check_list_gl_diagnostics_GL_Aps_LLs)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LLs)
tar_read(div_check_list_pa_diagnostics_PA_Aps_LLps)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LLps)
tar_read(div_check_list_pa_diagnostics_PA_Aps_LLs)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LLs_opt)
tar_read(div_check_list_pa_diagnostics_PA_Aps_LLps_opt)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LLps_opt)
tar_read(div_check_list_pa_diagnostics_PA_Aps_LLs_opt)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LDs)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LDps)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LDs_opt)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LDps_opt)
tar_read(div_check_list_pa_diagnostics_PA_Ap_LLs_opt)
```


GL_Aps_LLs (`model5`) is best for GLOPNET.

```{r}
targets::tar_load(loo_gl)
loo::loo_compare(
   loo_gl[[1]],
   model2 = loo_gl[[2]],
   model3 = loo_gl[[3]],
   model4 = loo_gl[[4]],
   model5 = loo_gl[[5]]) |>
  print()
```

PA_Ap_LLs_opt (`model7`) is best for Panama.
PA_Ap_LDs_opt (`model13`) is the second best.

```{r}
targets::tar_load(loo_pa)
loo::loo_compare(
  loo_pa[[1]],
  model2 = loo_pa[[2]],
  model3 = loo_pa[[3]],
  model4 = loo_pa[[4]],
  model5 = loo_pa[[5]],
  model6 = loo_pa[[6]],
  model7 = loo_pa[[7]],
  model8 = loo_pa[[8]],
  model9 = loo_pa[[9]],
  model10 = loo_pa[[10]],
  model11 = loo_pa[[11]],
  model12 = loo_pa[[12]],
  model13 = loo_pa[[13]],
  model14 = loo_pa[[14]]) |>
  print()
```


# Diagnostics for randomized data

There are too many divergent transitions.

```{r}
targets::tar_load(gl_rand_check)
summary(gl_rand_check)

targets::tar_load(pa_rand_check)
summary(pa_rand_check)
```


None of the randomized datasets did converge.

```{r}
targets::tar_load(gl_rand_sig)

gl_rand_sig

gl_rand_sig |>
  filter(sig == "sig") |>
  filter(!str_detect(para, "0"))
```

```{r}
targets::tar_load(pa_rand_sig)

pa_rand_sig

pa_rand_sig |>
  filter(sig == "sig") |>
  filter(!str_detect(para, "0"))
```


![](figs/coef_rand.png)

![](figs/coef_rand_pa.png)

```{r}
tar_load(gl_rand_summary)
tar_load(pa_rand_summary)
gl_rand_summary

para <-   expand_grid(a = c("a", "b", "g"), b = c("0", "p", "s")) |>
  mutate(para = str_c(a, b)) |>
  pull(para)

gl_rand_summary <- gl_rand_summary |>
  # filter(q2.5 * q97.5 > 0) |>
  # filter(variable %in% c(para, "theta")) |>
  mutate(site = "GL")

pa_rand_summary <- pa_rand_summary |>
  # filter(q2.5 * q97.5 > 0) |>
  # filter(variable %in% c(para, "theta")) |>
  mutate(site = "PA")

rand_summary <- bind_rows(gl_rand_summary, pa_rand_summary)

rand_summary |>
  group_by(.rep, .name, site) |>
  summarize(rhat_max = max(rhat, na.rm = TRUE)) |>
  arrange(site)

rand_summary |>
  filter(variable %in% c(para, "theta")) |>
  filter(q5 * q95 > 0) |> pull(variable)

data <- pa_rand_summary |>
  mutate(sim_id = as.factor(.rep) |> as.numeric() |> as.character()) |>
  filter(variable %in% c(para, "theta")) |>
    mutate(para = case_when(
      variable == "a0" ~ "alpha[0]",
      variable == "ap" ~ "alpha[p]",
      variable == "as" ~ "alpha[s]",
      variable == "b0" ~ "beta[0]",
      variable == "bs" ~ "beta[s]",
      variable == "g0" ~ "gamma[0]",
      variable == "gp" ~ "gamma[p]",
      variable == "gs" ~ "gamma[s]",
      variable == "theta" ~ "theta",
      TRUE ~ variable
    ))

site <- "PANAMA"

  ggplot(data) +
    geom_pointrange(aes(x = sim_id,
     y = mean, ymin = q2.5, ymax = q97.5, group = sim_id)) +
    geom_hline(yintercept = 0) +
    facet_wrap(~para, scale = "free", labeller = label_parsed) +
    xlab("Simulation ID") +
    ylab("Standardized coefficents") +
    ggtitle(site) +
    coord_flip() +
    theme_bw() +
    theme(
       legend.position = c(0.8, 0.2),
       legend.title = element_blank(),
       axis.text.x = element_text(angle = 45, vjust = 0.8)
    )


```


# Computing Environment

```{r}
devtools::session_info()
```


# Pipelines

```{r, fig.width=20, fig.height=20, eval=FALSE}
targets::tar_visnetwork()
```
